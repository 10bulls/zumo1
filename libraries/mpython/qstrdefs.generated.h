// This file was automatically generated by makeqstrdata.py

Q(__build_class__, (const byte*)"\x01\x06\x0f\x00" "__build_class__")
Q(__class__, (const byte*)"\x92\x03\x09\x00" "__class__")
Q(__doc__, (const byte*)"\xb2\x02\x07\x00" "__doc__")
Q(__import__, (const byte*)"\x17\x04\x0a\x00" "__import__")
Q(__init__, (const byte*)"\x30\x03\x08\x00" "__init__")
Q(__locals__, (const byte*)"\xfa\x03\x0a\x00" "__locals__")
Q(__main__, (const byte*)"\x21\x03\x08\x00" "__main__")
Q(__module__, (const byte*)"\x02\x04\x0a\x00" "__module__")
Q(__name__, (const byte*)"\x1d\x03\x08\x00" "__name__")
Q(__next__, (const byte*)"\x3b\x03\x08\x00" "__next__")
Q(__qualname__, (const byte*)"\xd0\x04\x0c\x00" "__qualname__")
Q(__repl_print__, (const byte*)"\xbb\x05\x0e\x00" "__repl_print__")
Q(__bool__, (const byte*)"\x28\x03\x08\x00" "__bool__")
Q(__len__, (const byte*)"\xbb\x02\x07\x00" "__len__")
Q(__getitem__, (const byte*)"\x6b\x04\x0b\x00" "__getitem__")
Q(__setitem__, (const byte*)"\x77\x04\x0b\x00" "__setitem__")
Q(__add__, (const byte*)"\xa5\x02\x07\x00" "__add__")
Q(__sub__, (const byte*)"\xc6\x02\x07\x00" "__sub__")
Q(micropython, (const byte*)"\xbc\x04\x0b\x00" "micropython")
Q(byte_code, (const byte*)"\xae\x03\x09\x00" "byte_code")
Q(native, (const byte*)"\x87\x02\x06\x00" "native")
Q(viper, (const byte*)"\x26\x02\x05\x00" "viper")
Q(asm_thumb, (const byte*)"\xc0\x03\x09\x00" "asm_thumb")
Q(Ellipsis, (const byte*)"\x45\x03\x08\x00" "Ellipsis")
Q(StopIteration, (const byte*)"\x55\x05\x0d\x00" "StopIteration")
Q(BaseException, (const byte*)"\x2a\x05\x0d\x00" "BaseException")
Q(AssertionError, (const byte*)"\xc2\x05\x0e\x00" "AssertionError")
Q(AttributeError, (const byte*)"\xbe\x05\x0e\x00" "AttributeError")
Q(ImportError, (const byte*)"\x85\x04\x0b\x00" "ImportError")
Q(IndentationError, (const byte*)"\x87\x06\x10\x00" "IndentationError")
Q(IndexError, (const byte*)"\x02\x04\x0a\x00" "IndexError")
Q(KeyError, (const byte*)"\x33\x03\x08\x00" "KeyError")
Q(NameError, (const byte*)"\x8b\x03\x09\x00" "NameError")
Q(NotImplementedError, (const byte*)"\xaf\x07\x13\x00" "NotImplementedError")
Q(OSError, (const byte*)"\xac\x02\x07\x00" "OSError")
Q(SyntaxError, (const byte*)"\x91\x04\x0b\x00" "SyntaxError")
Q(TypeError, (const byte*)"\xac\x03\x09\x00" "TypeError")
Q(ValueError, (const byte*)"\x07\x04\x0a\x00" "ValueError")
Q(OverflowError, (const byte*)"\x5e\x05\x0d\x00" "OverflowError")
Q(NoneType, (const byte*)"\x32\x03\x08\x00" "NoneType")
Q(abs, (const byte*)"\x36\x01\x03\x00" "abs")
Q(all, (const byte*)"\x39\x01\x03\x00" "all")
Q(any, (const byte*)"\x48\x01\x03\x00" "any")
Q(array, (const byte*)"\x1f\x02\x05\x00" "array")
Q(bool, (const byte*)"\xac\x01\x04\x00" "bool")
Q(bytearray, (const byte*)"\xd3\x03\x09\x00" "bytearray")
Q(bytes, (const byte*)"\x27\x02\x05\x00" "bytes")
Q(callable, (const byte*)"\x30\x03\x08\x00" "callable")
Q(chr, (const byte*)"\x3d\x01\x03\x00" "chr")
Q(classmethod, (const byte*)"\x97\x04\x0b\x00" "classmethod")
Q(complex, (const byte*)"\xf8\x02\x07\x00" "complex")
Q(dict, (const byte*)"\xa4\x01\x04\x00" "dict")
Q(dir, (const byte*)"\x3f\x01\x03\x00" "dir")
Q(divmod, (const byte*)"\x83\x02\x06\x00" "divmod")
Q(enumerate, (const byte*)"\xc6\x03\x09\x00" "enumerate")
Q(eval, (const byte*)"\xa8\x01\x04\x00" "eval")
Q(exec, (const byte*)"\xa5\x01\x04\x00" "exec")
Q(filter, (const byte*)"\x86\x02\x06\x00" "filter")
Q(float, (const byte*)"\x16\x02\x05\x00" "float")
Q(hash, (const byte*)"\xa4\x01\x04\x00" "hash")
Q(id, (const byte*)"\xcd\x00\x02\x00" "id")
Q(int, (const byte*)"\x4b\x01\x03\x00" "int")
Q(isinstance, (const byte*)"\x31\x04\x0a\x00" "isinstance")
Q(issubclass, (const byte*)"\x3c\x04\x0a\x00" "issubclass")
Q(iter, (const byte*)"\xb4\x01\x04\x00" "iter")
Q(len, (const byte*)"\x3f\x01\x03\x00" "len")
Q(list, (const byte*)"\xbc\x01\x04\x00" "list")
Q(map, (const byte*)"\x3e\x01\x03\x00" "map")
Q(max, (const byte*)"\x46\x01\x03\x00" "max")
Q(min, (const byte*)"\x44\x01\x03\x00" "min")
Q(next, (const byte*)"\xbf\x01\x04\x00" "next")
Q(ord, (const byte*)"\x45\x01\x03\x00" "ord")
Q(path, (const byte*)"\xad\x01\x04\x00" "path")
Q(pow, (const byte*)"\x56\x01\x03\x00" "pow")
Q(print, (const byte*)"\x2d\x02\x05\x00" "print")
Q(range, (const byte*)"\x0d\x02\x05\x00" "range")
Q(repr, (const byte*)"\xb9\x01\x04\x00" "repr")
Q(set, (const byte*)"\x4c\x01\x03\x00" "set")
Q(sorted, (const byte*)"\x91\x02\x06\x00" "sorted")
Q(staticmethod, (const byte*)"\x09\x05\x0c\x00" "staticmethod")
Q(sum, (const byte*)"\x55\x01\x03\x00" "sum")
Q(super, (const byte*)"\x2f\x02\x05\x00" "super")
Q(str, (const byte*)"\x59\x01\x03\x00" "str")
Q(sys, (const byte*)"\x5f\x01\x03\x00" "sys")
Q(tuple, (const byte*)"\x2a\x02\x05\x00" "tuple")
Q(type, (const byte*)"\xc2\x01\x04\x00" "type")
Q(zip, (const byte*)"\x53\x01\x03\x00" "zip")
Q(append, (const byte*)"\x78\x02\x06\x00" "append")
Q(pop, (const byte*)"\x4f\x01\x03\x00" "pop")
Q(sort, (const byte*)"\xc8\x01\x04\x00" "sort")
Q(join, (const byte*)"\xb0\x01\x04\x00" "join")
Q(strip, (const byte*)"\x32\x02\x05\x00" "strip")
Q(format, (const byte*)"\x89\x02\x06\x00" "format")
Q(key, (const byte*)"\x49\x01\x03\x00" "key")
Q(reverse, (const byte*)"\xfc\x02\x07\x00" "reverse")
Q(bound_method, (const byte*)"\xf8\x04\x0c\x00" "bound_method")
Q(closure, (const byte*)"\xfd\x02\x07\x00" "closure")
Q(dict_view, (const byte*)"\xbe\x03\x09\x00" "dict_view")
Q(function, (const byte*)"\x66\x03\x08\x00" "function")
Q(generator, (const byte*)"\xc7\x03\x09\x00" "generator")
Q(iterator, (const byte*)"\x6a\x03\x08\x00" "iterator")
Q(module, (const byte*)"\x86\x02\x06\x00" "module")
Q(slice, (const byte*)"\x10\x02\x05\x00" "slice")
Q(_lt_module_gt_, (const byte*)"\x00\x03\x08\x00" "<module>")
Q(_lt_lambda_gt_, (const byte*)"\xdb\x02\x08\x00" "<lambda>")
Q(_lt_listcomp_gt_, (const byte*)"\xe5\x03\x0a\x00" "<listcomp>")
Q(_lt_dictcomp_gt_, (const byte*)"\xcd\x03\x0a\x00" "<dictcomp>")
Q(_lt_setcomp_gt_, (const byte*)"\x75\x03\x09\x00" "<setcomp>")
Q(_lt_genexpr_gt_, (const byte*)"\x73\x03\x09\x00" "<genexpr>")
Q(_lt_string_gt_, (const byte*)"\x11\x03\x08\x00" "<string>")
Q(_lt_stdin_gt_, (const byte*)"\x9c\x02\x07\x00" "<stdin>")
Q(help, (const byte*)"\xa9\x01\x04\x00" "help")
Q(pyb, (const byte*)"\x4b\x01\x03\x00" "pyb")
Q(info, (const byte*)"\xac\x01\x04\x00" "info")
Q(sd_test, (const byte*)"\xf6\x02\x07\x00" "sd_test")
Q(stop, (const byte*)"\xc6\x01\x04\x00" "stop")
Q(standby, (const byte*)"\xf5\x02\x07\x00" "standby")
Q(source_dir, (const byte*)"\x2f\x04\x0a\x00" "source_dir")
Q(main, (const byte*)"\xa5\x01\x04\x00" "main")
Q(sync, (const byte*)"\xbd\x01\x04\x00" "sync")
Q(gc, (const byte*)"\xca\x00\x02\x00" "gc")
Q(delay, (const byte*)"\x0f\x02\x05\x00" "delay")
Q(switch, (const byte*)"\x92\x02\x06\x00" "switch")
Q(servo, (const byte*)"\x2f\x02\x05\x00" "servo")
Q(pwm, (const byte*)"\x54\x01\x03\x00" "pwm")
Q(accel, (const byte*)"\xf8\x01\x05\x00" "accel")
Q(accel_read, (const byte*)"\xf3\x03\x0a\x00" "accel_read")
Q(accel_mode, (const byte*)"\xfc\x03\x0a\x00" "accel_mode")
Q(hid, (const byte*)"\x35\x01\x03\x00" "hid")
Q(time, (const byte*)"\xaf\x01\x04\x00" "time")
Q(rand, (const byte*)"\xa5\x01\x04\x00" "rand")
Q(Led, (const byte*)"\x15\x01\x03\x00" "Led")
Q(LCD, (const byte*)"\xd3\x00\x03\x00" "LCD")
Q(Servo, (const byte*)"\x0f\x02\x05\x00" "Servo")
Q(SDcard, (const byte*)"\x31\x02\x06\x00" "SDcard")
Q(I2C, (const byte*)"\xbe\x00\x03\x00" "I2C")
Q(gpio, (const byte*)"\xaf\x01\x04\x00" "gpio")
Q(gpio_in, (const byte*)"\xe5\x02\x07\x00" "gpio_in")
Q(gpio_out, (const byte*)"\x66\x03\x08\x00" "gpio_out")
Q(Usart, (const byte*)"\x0f\x02\x05\x00" "Usart")
Q(ADC, (const byte*)"\xc8\x00\x03\x00" "ADC")
Q(open, (const byte*)"\xb2\x01\x04\x00" "open")
Q(File, (const byte*)"\x80\x01\x04\x00" "File")
Q(0_colon__slash_, (const byte*)"\x99\x00\x03\x00" "0:/")
Q(0_colon__slash_src, (const byte*)"\xe1\x01\x06\x00" "0:/src")
Q(0_colon__slash_lib, (const byte*)"\xd0\x01\x06\x00" "0:/lib")
